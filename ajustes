#ajustes
def primer_ajuste(bloques, procesos):
    asignaciones = [-1] * len(procesos)
    for i, proceso in enumerate(procesos):
        for j, bloque in enumerate(bloques):
            if bloque >= proceso:
                asignaciones[i] = j
                bloques[j] =-1
                break
    return asignaciones

def mejor_ajuste(bloques, procesos):
    asignaciones = [-1] * len(procesos)
    for i, proceso in enumerate(procesos):
        mejor_bloque = -1
        for j, bloque in enumerate(bloques):
            if bloque >= proceso and bloques[j] != -1 and (mejor_bloque == -1 or bloque < bloques[mejor_bloque]):
                mejor_bloque = j
        if mejor_bloque != -1:
            asignaciones[i] = mejor_bloque
            bloques[mejor_bloque] = -1
    return asignaciones

def siguiente_ajuste(bloques, procesos):
    asignaciones = [-1] * len(procesos)
    puntero = 0
    for i, proceso in enumerate(procesos):
        n = len(bloques)
        for _ in range(n):
            if bloques[puntero] >= proceso:
                asignaciones[i] = puntero
                bloques[puntero] -= proceso
                puntero = (puntero + 1) % n
                break
            puntero = (puntero + 1) % n
    return asignaciones

def siguiente_ajuste_sin_circularidad(bloques, procesos):
    asignaciones = [-1] * len(procesos)  # -1 indica que no se asignó el proceso
    start_index = 0  # Índice inicial para buscar bloques
    
    for i, proceso in enumerate(procesos):
        for j in range(start_index, len(bloques)):  # Busca desde el índice actual hasta el final
            if bloques[j] >= proceso and bloques[j] != -1:
                asignaciones[i] = j  # Asignar el proceso al bloque
                bloques[j] = -1  # Reducir el tamaño del bloque
                start_index = j + 1 # Continuar desde este bloque
                break
    return asignaciones


def peor_ajuste(bloques, procesos):
    asignaciones = [-1] * len(procesos)
    for i, proceso in enumerate(procesos):
        peor_bloque = -1
        for j, bloque in enumerate(bloques):
            if bloque >= proceso and bloques[j] != -1 and (peor_bloque == -1 or bloque > bloques[peor_bloque]):
                peor_bloque = j
        if peor_bloque != -1:
            asignaciones[i] = peor_bloque
            bloques[peor_bloque] = -1
    return asignaciones

def mostrar_resultados(procesos, asignaciones, nombre):
    print(f"\nResultados para {nombre}:")
    for i, asignacion in enumerate(asignaciones):
        if asignacion != -1:
            print(f"Proceso {i} (Tamaño {procesos[i]}) asignado al bloque {asignacion}.")
        else:
            print(f"Proceso {i} (Tamaño {procesos[i]}) no pudo ser asignado.")

def main():
    # Entrada de bloques y procesos
    bloques = list(map(int, input("Ingrese los tamaños de los bloques de memoria (separados por espacio): ").split()))
    procesos = list(map(int, input("Ingrese los tamaños de los procesos (separados por espacio): ").split()))

    # Ejecutar algoritmos
    primer_resultado = primer_ajuste(bloques[:], procesos)
    mostrar_resultados(procesos, primer_resultado, "Primer Ajuste")

    mejor_resultado = mejor_ajuste(bloques[:], procesos)
    mostrar_resultados(procesos, mejor_resultado, "Mejor Ajuste")

    siguiente_resultado = siguiente_ajuste(bloques[:], procesos)
    mostrar_resultados(procesos, siguiente_resultado, "Siguiente Ajuste")

    siguiente_resultado2 = siguiente_ajuste_sin_circularidad(bloques[:], procesos)
    mostrar_resultados(procesos, siguiente_resultado2, "Siguiente Ajuste2")

    peor_resultado = peor_ajuste(bloques[:], procesos)
    mostrar_resultados(procesos, peor_resultado, "Peor Ajuste")

if __name__ == "__main__":
    main()


